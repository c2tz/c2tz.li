{"config":{"lang":["fr"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/","title":"Customiser la page de son profil GitHub","text":"<p>L'objectif de ce post va \u00eatre de vous apprendre \u00e0 customiser votre page d'accueil GitHub. Il est d\u00e9stin\u00e9 \u00e0 un public d\u00e9butant donc n'importe qui peut y arriver.</p> <p>GitHub, quezako ?</p> <p>Pour les quelques ploucs (1) comme le J ou le R qui ne sont pas des nerds tel que le C, le RE ou encore le H voici ma d\u00e9finition simple.</p> <ol> <li> Couverture d'un livre pour enfants qui s'appelle \"plouk\" </li> </ol> <p>C'est comme un r\u00e9seau social pour les d\u00e9veloppeurs, o\u00f9 ils peuvent h\u00e9berger le code source de leurs projets informatique, suivre les modifications apport\u00e9es par d'autres personnes, proposer des modifications (appel\u00e9es \"pull requests\"), et travailler ensemble pour am\u00e9liorer des logiciels. Un jour j'essaierai de faire un article plus complet sur le sujet.</p> <p>Apr\u00e8s tout si j'ai r\u00e9ussi n'importe qui peut le faire.</p> <p>Voici un exemple de ce que vous pouvez obtenir facilement en suivant ce tutoriel d\u00e9tail\u00e9 :</p> Exemple provenant de ma page d'accueil GitHub"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#a-quoi-ca-sert-de-customiser-son-profil","title":"A quoi ca sert de customiser son profil ?","text":"<p>R\u00e9pondons \u00e0 cette question de la facon la plus objective possible: customiser sa page de profil GitHub ca sert \u00e0 rien.</p> <p>Bon nombre de d\u00e9veloppeur plus chevronn\u00e9 que moi se fiche totalement de l'apparence que cet \u00e9l\u00e9ment peut avoir. Tant que celui-ci reste pratique, fonctionnel et peu encombrant \u00e0 leurs yeux, chose que je comprend tout \u00e0 fait.</p> <p>C'est en fait un \u00e9l\u00e9ment de d\u00e9coration ou une sorte de vitrine.</p> <p>Mais si des options existes pour am\u00e9liorer l'apparence que cette vitrine peut avoir alors autant les utilis\u00e9 si on le souhaite.</p> <p>Un peu comme un site sans CSS : il fonctionne mais il est laid .</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#par-ou-commencer","title":"Par o\u00f9 commencer ?","text":"<p>Il vous faudra 1 PC :</p> <ul> <li> Windows 10 et +<ul> <li> SSH <sup>1</sup> (Faculatif si GIT)</li> <li> Paint ou alternative</li> </ul> </li> <li> 1 Compte GitHub actif</li> <li> GIT</li> <li> GitHub Desktop <sup>2</sup> (Faculatif si GIT)</li> </ul>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#usage-de-ces-logiciels","title":"Usage de ces logiciels","text":""},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#windows-10-et","title":"Windows 10 et +","text":"<p>Linux fonctionne aussi bien et les commandes GIT sont les m\u00eames. Tout cela peut m\u00eame fonctionner avec un t\u00e9l\u00e9phone Android et l'application Termux mais c'est pas pratique mieux vaut donc un PC Windows comme  tout le monde.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#ssh","title":"SSH","text":"<p>Comme dit ici SSH peut \u00eatre utilis\u00e9 si vous avez trouver la CLI de GIT trop peu ergonomique pour vous, ou un peu vieillote mais pour les quelques commandes qui vont \u00eatre tap\u00e9 cela est suffisant.</p> <p>A vous donc de voir si vous voulez utiliser :</p> <ul> <li>Utiliser OpenSSH (Windows)</li> <li>Utiliser GitSSH (GIT)</li> </ul> <p>Si vous utilisez OpenSSH je vous invite \u00e0 regarder l'info bulle qui est ci-dessous.</p> Commande SSH Windows Super SSH fonctionne A\u00efe cela ne fonctionne pas  <p>Vous avez ceci :</p> <p></p> <p> C'est bien \u00c9l\u00e9onore on est content</p> <p>Vous avez ceci :</p> <p></p> <p>Ca signifie juste que SSH n'est pas activ\u00e9, normalement il suffit de faire ceci :</p> <ol> <li>Win+R <code>control appwiz.cpl,,2</code>  cocher \"OpenSSH\"</li> <li>redemarrer le PC</li> </ol> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 stylesheets/\n\u2502     \u2514\u2500 extra.css\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n  - stylesheets/extra.css\n</code></pre>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#additional-javascript","title":"Additional JavaScript","text":"<p>If you want to integrate another syntax highlighter or add some custom logic to your theme, create a new JavaScript file in the <code>docs</code> directory:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 javascripts/\n\u2502     \u2514\u2500 extra.js\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, add the following lines to <code>mkdocs.yml</code>:</p> <pre><code>extra_javascript:\n  - javascripts/extra.js\n</code></pre> How to integrate with third-party JavaScript libraries <p>It is likely that you will want to run your JavaScript code only once the page has been fully loaded by the browser. This means installing a callback function subscribing to events on the <code>document$</code> observable exported by Material for MkDocs. Using the <code>document$</code> observable is particularly important if you are using instant loading since it will not result in a page refresh in the browser - but subscribers on the observable will be notified.</p> <pre><code>document$.subscribe(function() {\n  console.log(\"Initialize third-party libraries here\")\n})\n</code></pre> <p><code>document$</code> is an RxJS Observable and you can call the <code>subscribe()</code> method any number of times to attach different functionality.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#extending-the-theme","title":"Extending the theme","text":"<p>If you want to alter the HTML source (e.g. add or remove some parts), you can extend the theme. MkDocs supports theme extension, an easy way to override parts of Material for MkDocs without forking from git. This ensures that you can update to the latest version more easily.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#setup-and-theme-structure","title":"Setup and theme structure","text":"<p>Enable Material for MkDocs as usual in <code>mkdocs.yml</code>, and create a new folder for <code>overrides</code> which you then reference using the <code>custom_dir</code> setting:</p> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n</code></pre> <p>Theme extension prerequisites</p> <p>As the <code>custom_dir</code> setting is used for the theme extension process, Material for MkDocs needs to be installed via <code>pip</code> and referenced with the <code>name</code> setting in <code>mkdocs.yml</code>. It will not work when cloning from <code>git</code>.</p> <p>The structure in the <code>overrides</code> directory must mirror the directory structure of the original theme, as any file in the <code>overrides</code> directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 .icons/                             # Bundled icon sets\n\u251c\u2500 assets/\n\u2502  \u251c\u2500 images/                          # Images and icons\n\u2502  \u251c\u2500 javascripts/                     # JavaScript files\n\u2502  \u2514\u2500 stylesheets/                     # Style sheets\n\u251c\u2500 partials/\n\u2502  \u251c\u2500 integrations/                    # Third-party integrations\n\u2502  \u2502  \u251c\u2500 analytics/                    # Analytics integrations\n\u2502  \u2502  \u2514\u2500 analytics.html                # Analytics setup\n\u2502  \u251c\u2500 languages/                       # Translation languages\n\u2502  \u251c\u2500 actions.html                     # Actions\n\u2502  \u251c\u2500 alternate.html                   # Site language selector\n\u2502  \u251c\u2500 comments.html                    # Comment system (empty by default)\n\u2502  \u251c\u2500 consent.html                     # Consent\n\u2502  \u251c\u2500 content.html                     # Page content\n\u2502  \u251c\u2500 copyright.html                   # Copyright and theme information\n\u2502  \u251c\u2500 feedback.html                    # Was this page helpful?\n\u2502  \u251c\u2500 footer.html                      # Footer bar\n\u2502  \u251c\u2500 header.html                      # Header bar\n\u2502  \u251c\u2500 icons.html                       # Custom icons\n\u2502  \u251c\u2500 language.html                    # Translation setup\n\u2502  \u251c\u2500 logo.html                        # Logo in header and sidebar\n\u2502  \u251c\u2500 nav.html                         # Main navigation\n\u2502  \u251c\u2500 nav-item.html                    # Main navigation item\n\u2502  \u251c\u2500 pagination.html                  # Pagination (used for blog)\n\u2502  \u251c\u2500 palette.html                     # Color palette toggle\n\u2502  \u251c\u2500 post.html                        # Blog post excerpt\n\u2502  \u251c\u2500 progress.html                    # Progress indicator\n\u2502  \u251c\u2500 search.html                      # Search interface\n\u2502  \u251c\u2500 social.html                      # Social links\n\u2502  \u251c\u2500 source.html                      # Repository information\n\u2502  \u251c\u2500 source-file.html                 # Source file information\n\u2502  \u251c\u2500 tabs.html                        # Tabs navigation\n\u2502  \u251c\u2500 tabs-item.html                   # Tabs navigation item\n\u2502  \u251c\u2500 tags.html                        # Tags\n\u2502  \u251c\u2500 toc.html                         # Table of contents\n\u2502  \u251c\u2500 toc-item.html                    # Table of contents item\n\u2502  \u2514\u2500 top.html                         # Back-to-top button\n\u251c\u2500 404.html                            # 404 error page\n\u251c\u2500 base.html                           # Base template\n\u251c\u2500 blog.html                           # Blog index page\n\u251c\u2500 blog-archive.html                   # Blog archive index page\n\u251c\u2500 blog-category.html                  # Blog category index page\n\u251c\u2500 blog-post.html                      # Blog post page\n\u2514\u2500 main.html                           # Default page\n</code></pre>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#overriding-partials","title":"Overriding partials","text":"<p>In order to override a partial, we can replace it with a file of the same name and location in the <code>overrides</code> directory. For example, to replace the original <code>footer.html</code> partial, create a new <code>footer.html</code> partial in the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 partials/\n\u2502     \u2514\u2500 footer.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>MkDocs will now use the new partial when rendering the theme. This can be done with any file.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#overriding-blocks","title":"Overriding blocks recommended","text":"<p>Besides overriding partials, it's also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a <code>main.html</code> file inside the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 main.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, e.g. to override the site title, add the following lines to <code>main.html</code>:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block htmltitle %}\n  &lt;title&gt;Lorem ipsum dolor sit amet&lt;/title&gt;\n{% endblock %}\n</code></pre> <p>If you intend to add something to a block rather than to replace it altogether with new content, use <code>{{ super() }}</code> inside the block to include the original block content. This is particularly useful when adding third-party scripts to your docs, e.g.</p> <pre><code>{% extends \"base.html\" %}\n\n{% block scripts %}\n  &lt;!-- Add scripts that need to run before here --&gt;\n  {{ super() }}\n  &lt;!-- Add scripts that need to run afterwards here --&gt;\n{% endblock %}\n</code></pre> <p>The following template blocks are provided by the theme:</p> Block name Purpose <code>analytics</code> Wraps the Google Analytics integration <code>announce</code> Wraps the announcement bar <code>config</code> Wraps the JavaScript application config <code>container</code> Wraps the main content container <code>content</code> Wraps the main content <code>extrahead</code> Empty block to add custom meta tags <code>fonts</code> Wraps the font definitions <code>footer</code> Wraps the footer with navigation and copyright <code>header</code> Wraps the fixed header bar <code>hero</code> Wraps the hero teaser (if available) <code>htmltitle</code> Wraps the <code>&lt;title&gt;</code> tag <code>libs</code> Wraps the JavaScript libraries (header) <code>outdated</code> Wraps the version warning <code>scripts</code> Wraps the JavaScript application (footer) <code>site_meta</code> Wraps the meta tags in the document head <code>site_nav</code> Wraps the site navigation and table of contents <code>styles</code> Wraps the style sheets (also extra sources) <code>tabs</code> Wraps the tabs navigation (if available)"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#theme-development","title":"Theme development","text":"<p>Material for MkDocs is built on top of TypeScript, RxJS and SASS, and uses a lean, custom build process to put everything together.[^3] If you want to make more fundamental changes, it may be necessary to make the adjustments directly in the source of the theme and recompile it.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#environment-setup","title":"Environment setup","text":"<p>First, clone the repository for the edition you want to work on. If you want to clone the Insiders repository, you need to become a sponsor first to gain access.</p> Material for MkDocsInsiders <pre><code>git clone https://github.com/squidfunk/mkdocs-material\ncd mkdocs-material\n</code></pre> <p>You will need to have a GitHub access token as described in the Insiders documentation and make it available in the <code>$GH_TOKEN</code> variable.</p> <pre><code>git clone https://${GH_TOKEN}@github.com/squidfunk/mkdocs-material-insiders.git # (1)!\n</code></pre> <ol> <li> <p>If you are using SSH keys for authenticating with GitHub, you can     clone Insiders with this command:</p> <pre><code>git clone git@github.com:squidfunk/mkdocs-material-insiders.git\n</code></pre> </li> </ol> <p>Next, create a new Python virtual environment and activate it:</p> <pre><code>python -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Ensure pip always runs in a virtual environment</p> <p>If you set the environment variable <code>PIP_REQUIRE_VIRTUALENV</code> to <code>true</code>, <code>pip</code> will refuse to install anything outside a virtual environment. Forgetting to activate a <code>venv</code> can be very annoying as it will install all sorts of things outside virtual environments over time, possibly leading to further errors. So, you may want to add this to your <code>.bashrc</code> or <code>.zshrc</code> and re-start your shell:</p> <pre><code>export PIP_REQUIRE_VIRTUALENV=true\n</code></pre> <p>Then, install all Python dependencies:</p> Material for MkDocsInsiders <pre><code>pip install -e \".[recommended]\"\npip install nodeenv\n</code></pre> <pre><code>pip install -e \".[recommended, imaging]\"\npip install nodeenv\n</code></pre> <p>In addition, you will need to install the <code>cairo</code> and <code>pngquant</code> libraries in your system, as described in the image processing requirements guide.</p> <p>Finally, install the Node.js LTS version into the Python virtual environment and install all Node.js dependencies:</p> <pre><code>nodeenv -p -n lts\nnpm install\n</code></pre>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#development-mode","title":"Development mode","text":"<p>Start the watcher with:</p> <pre><code>npm start\n</code></pre> <p>Then, in a second terminal window, start the MkDocs live preview server with:</p> <pre><code>mkdocs serve --watch-theme\n</code></pre> <p>Point your browser to localhost:8000 and you should see this very documentation in front of you.</p> <p>Automatically generated files</p> <p>Never make any changes in the <code>material</code> directory, as the contents of this directory are automatically generated from the <code>src</code> directory and will be overwritten when the theme is built.</p>"},{"location":"2024/03/07/customiser-la-page-de-son-profil-github/#building-the-theme","title":"Building the theme","text":"<p>When you're finished making your changes, you can build the theme by invoking:</p> <pre><code>npm run build # (1)!\n</code></pre> <ol> <li> <p>While this command will build all theme files, it will skip the overrides     used in Material for MkDocs' own documentation which are not distributed     with the theme. If you forked the theme and want to build the overrides     as well, e.g. before submitting a PR with changes, use:</p> <pre><code>npm run build:all\n</code></pre> <p>This will take longer, as now the icon search index, schema files, as well as additional style sheet and JavaScript files are built.</p> </li> </ol> <p>This triggers the production-level compilation and minification of all style sheets and JavaScript files. After the command exits, the compiled files are located in the <code>material</code> directory. When running <code>mkdocs build</code>, you should now see your changes to the original theme.</p> <ol> <li> <p>Dans une certaine mesure SSH n'est pas n\u00e9cessaire \u00e9tant donn\u00e9 que GIT embarque d\u00e9ja son propre client SSH. Mais je trouve que le Terminal Windows est plus confortable d'utilisation.\u00a0\u21a9</p> </li> <li> <p>Seulement et si seulement vous \u00eates ce que l'on appelle un newbie et que vous \u00eates confront\u00e9e \u00e0 des merge resolve (car bien evidemment vous ne connaissez pas les commandes GIT par )\u00a0\u21a9</p> </li> <li> <p>Prior to  the build was based on Webpack, resulting in occasional broken builds due to incompatibilities with loaders and plugins. Therefore, we decided to swap Webpack for a leaner solution which is now based on RxJS as the application itself. This allowed for the pruning of more than 500 dependencies (~30% less).\u00a0\u21a9</p> </li> </ol>"},{"location":"archive/2024/","title":"2024","text":""},{"location":"category/g%C3%A9n%C3%A9ral/","title":"G\u00e9n\u00e9ral","text":""},{"location":"category/d%C3%A9veloppement/","title":"D\u00e9veloppement","text":""}]}